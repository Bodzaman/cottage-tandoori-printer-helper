name: Build Epson Helper Executables
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
            ext: .exe
          - os: macos-latest
            platform: macos
            ext: ""
          - os: ubuntu-latest
            platform: linux
            ext: ""
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies with retry
      run: |
        for i in {1..3}; do
          npm ci && break || sleep 30
        done
      shell: bash
        
    - name: Install PKG globally with retry
      run: |
        for i in {1..3}; do
          npm install -g pkg && break || sleep 30
        done
      shell: bash
        
    - name: Build executable
      run: |
        npm run build:${{ matrix.platform }}
      env:
        NODE_OPTIONS: '--max-old-space-size=4096'
        
    - name: Verify build output
      run: |
        if [ "${{ matrix.platform }}" = "win" ]; then
          ls -la qsai-printer-helper-win.exe
        elif [ "${{ matrix.platform }}" = "macos" ]; then
          ls -la qsai-printer-helper-macos
        else
          ls -la qsai-printer-helper-linux
        fi
      shell: bash
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qsai-printer-helper-${{ matrix.platform }}
        path: |
          qsai-printer-helper-*${{ matrix.ext }}
        retention-days: 30
        
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: List artifacts
      run: find ./artifacts -type f -name "*" | head -20
      
    - name: Create release with retry
      id: create_release
      run: |
        VERSION="v$(date +%Y%m%d.%H%M%S)"
        
        # Create release with retry logic
        for i in {1..5}; do
          echo "Attempt $i to create release..."
          
          RESPONSE=$(curl -s -w "%{http_code}" \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{
              \"tag_name\": \"$VERSION\",
              \"name\": \"QSAI Epson Helper $VERSION\",
              \"body\": \"Automated build of QSAI Epson printer helper with cross-platform executables\\n\\n- Windows: qsai-printer-helper-win.exe\\n- macOS: qsai-printer-helper-macos\\n- Linux: qsai-printer-helper-linux\",
              \"draft\": false,
              \"prerelease\": false
            }" \
            https://api.github.com/repos/${{ github.repository }}/releases)
            
          HTTP_CODE="${RESPONSE: -3}"
          RESPONSE_BODY="${RESPONSE%???}"
          
          echo "HTTP Code: $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          
          if [ "$HTTP_CODE" = "201" ]; then
            echo "Release created successfully!"
            echo "release_response=$RESPONSE_BODY" >> $GITHUB_OUTPUT
            break
          elif [ "$HTTP_CODE" = "403" ] && echo "$RESPONSE_BODY" | grep -q "rate limit"; then
            echo "Rate limited, waiting 60 seconds..."
            sleep 60
          else
            echo "Failed with code $HTTP_CODE, waiting 30 seconds..."
            sleep 30
          fi
          
          if [ $i -eq 5 ]; then
            echo "Failed to create release after 5 attempts"
            exit 1
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload release assets with retry
      run: |
        UPLOAD_URL=$(echo '${{ steps.create_release.outputs.release_response }}' | jq -r '.upload_url' | sed 's/{?name,label}//')
        
        # Upload each executable with retry
        for artifact_dir in ./artifacts/*/; do
          for file in "$artifact_dir"*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading $filename..."
              
              for i in {1..3}; do
                RESPONSE=$(curl -s -w "%{http_code}" \
                  -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$file" \
                  "$UPLOAD_URL?name=$filename")
                  
                HTTP_CODE="${RESPONSE: -3}"
                
                if [ "$HTTP_CODE" = "201" ]; then
                  echo "$filename uploaded successfully!"
                  break
                else
                  echo "Upload failed with code $HTTP_CODE, retrying in 30s..."
                  sleep 30
                fi
                
                if [ $i -eq 3 ]; then
                  echo "Failed to upload $filename after 3 attempts"
                fi
              done
            fi
          done
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
